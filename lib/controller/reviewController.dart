import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:maebanjumpen/constant/constant_value.dart';
import 'package:maebanjumpen/controller/hireController.dart';
import 'package:maebanjumpen/controller/housekeeperController.dart';
import 'package:maebanjumpen/model/review.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ import ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

class Reviewcontroller {
  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á HousekeeperController ‡πÅ‡∏•‡∏∞ Hirecontroller ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß
  // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rating ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏ù‡∏±‡πà‡∏á Server (ReviewService)

  const Reviewcontroller();

  Future<Map<String, dynamic>> addReview({
    required String reviewMessage,
    required String reviewDate,
    required int score,
    required int hireId,
  }) async {
    final url = Uri.parse('$baseURL/maeban/reviews');

    try {
      final response = await http.post(
        url,
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          // üí° ‡πÉ‡∏™‡πà headers ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô Authorization ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        },
        // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà ReviewDTO ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        body: jsonEncode(<String, dynamic>{
          'reviewMessage': reviewMessage,
          'reviewDate': reviewDate,
          'score': score,
          'hireId': hireId, // Spring Boot ‡∏à‡∏∞‡πÉ‡∏ä‡πâ hireId ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Review ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rating
        }),
      );

      print('Review API Response Status: ${response.statusCode}');
      print('Review API Response Body: ${response.body}');

      if (response.statusCode == 201) {
        // ‡∏´‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP 201 Created)
        final Map<String, dynamic> responseBody = jsonDecode(response.body);
        // üéØ ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rating ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏≥‡πÉ‡∏ô ReviewService.saveReview() ‡πÅ‡∏•‡πâ‡∏ß
        return responseBody;
      } else if (response.statusCode == 409) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö 409 Conflict: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        Map<String, dynamic> errorBody = {};
        try {
          errorBody = jsonDecode(response.body);
        } catch (_) {
          errorBody['message'] = 'Conflict: ${response.body}';
        }

        return {
          'error': 'Conflict',
          'message': errorBody['message'] ?? '‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß',
          'statusCode': response.statusCode,
        };
      } else if (response.statusCode == 404) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ Hire Not Found (‡∏à‡∏≤‡∏Å Service)
        return {
          'error': 'Not Found',
          'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô (Hire) ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
          'statusCode': response.statusCode,
        };
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        Map<String, dynamic> errorBody = {};
        try {
          errorBody = jsonDecode(response.body);
        } catch (_) {
          errorBody['message'] = response.body;
        }

        return {
          'error': 'Failed to submit review',
          'message':
              '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${response.statusCode}, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${errorBody['message'] ?? '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}',
          'statusCode': response.statusCode,
        };
      }
    } catch (e) {
      print('Error calling addReview API: $e');
      return {
        'error': 'Exception during API call',
        'message': e.toString(),
        'statusCode': 0, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ù‡∏±‡πà‡∏á client
      };
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Review>?> getAllReviews() async {
    final url = Uri.parse('$baseURL/maeban/reviews'); // üí° ‡πÉ‡∏ä‡πâ /maeban/reviews
    try {
      final response = await http.get(url, headers: headers);
      print('Get All Reviews API Response Status: ${response.statusCode}');
      print('Get All Reviews API Response Body: ${response.body}');
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = jsonDecode(utf8.decode(response.bodyBytes));
        return jsonList.map((json) => Review.fromJson(json)).toList();
      } else {
        print('Failed to fetch reviews. Status code: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error calling getAllReviews API: $e');
      return null;
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏° hireId
  // üí° Note: Endpoint ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Spring Boot ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ReviewDTO ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà List)
  Future<Review?> getReviewByHireId(int hireId) async {
    final url = Uri.parse('$baseURL/maeban/reviews/hire/$hireId');
    try {
      final response = await http.get(url, headers: headers);
      print('Get Review by Hire ID API Response Status: ${response.statusCode}');
      print('Get Review by Hire ID API Response Body: ${response.body}');
      if (response.statusCode == 200) {
        return Review.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else if (response.statusCode == 404) {
         print('No review found for hire ID $hireId.');
         return null;
      } else {
        print('Failed to fetch reviews for hire ID $hireId. Status code: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error calling getReviewByHireId API: $e');
      return null;
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  Future<Map<String, dynamic>> updateReview({
    required int reviewId,
    required String reviewMessage,
    required String reviewDate,
    required int score,
  }) async {
    final url = Uri.parse('$baseURL/maeban/reviews/$reviewId');
    try {
      final response = await http.put(
        url,
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(<String, dynamic>{
          'reviewMessage': reviewMessage,
          'reviewDate': reviewDate,
          'score': score,
        }),
      );

      print('Update Review API Response Status: ${response.statusCode}');
      print('Update Review API Response Body: ${response.body}');

      if (response.statusCode == 200) {
        // ‡∏´‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP 200 OK)
        // Spring Boot Service ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rating ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
        final Map<String, dynamic> responseBody = jsonDecode(utf8.decode(response.bodyBytes));
        return responseBody;
      } else {
        return {
          'error': 'Failed to update review',
          'message': 'Status code: ${response.statusCode}, Body: ${utf8.decode(response.bodyBytes)}',
        };
      }
    } catch (e) {
      print('Error calling updateReview API: $e');
      return {'error': 'Exception during API call', 'message': e.toString()};
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  Future<Map<String, dynamic>> deleteReview(int reviewId) async {
    final url = Uri.parse('$baseURL/maeban/reviews/$reviewId');
    try {
      final response = await http.delete(url, headers: headers);
      print('Delete Review API Response Status: ${response.statusCode}');
      print('Delete Review API Response Body: ${response.body}');

      if (response.statusCode == 204) {
        // ‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP 204 No Content)
        // Spring Boot Service ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Rating ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
        return {'message': 'Review deleted successfully'};
      } else {
        return {
          'error': 'Failed to delete review',
          'message': 'Status code: ${response.statusCode}, Body: ${utf8.decode(response.bodyBytes)}',
        };
      }
    } catch (e) {
      print('Error calling deleteReview API: $e');
      return {'error': 'Exception during API call', 'message': e.toString()};
    }
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏° ID
  Future<Review?> getReviewById(int reviewId) async {
    final url = Uri.parse('$baseURL/maeban/reviews/$reviewId');
    try {
      final response = await http.get(url, headers: headers);
      if (response.statusCode == 200) {
        return Review.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
      } else {
        print('Failed to fetch review by ID $reviewId. Status code: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error calling getReviewById API: $e');
      return null;
    }
  }
  
  // üí° Note: ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ Endpoint ‡πÉ‡∏ô Spring Boot Controller ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
  // ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÉ‡∏ô ReviewService ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Flutter ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ
  
  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏° hireId ‡πÅ‡∏•‡∏∞ score
  Future<List<Review>?> getReviewsByHireIdAndScore(int hireId, int score) async {
    final url = Uri.parse('$baseURL/maeban/reviews/hire/$hireId/score/$score');
    // ... (‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API)
    return null; // Placeholder
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏° hireId ‡πÅ‡∏•‡∏∞ reviewDate
  Future<List<Review>?> getReviewsByHireIdAndDate(int hireId, String reviewDate) async {
    final url = Uri.parse('$baseURL/maeban/reviews/hire/$hireId/date/$reviewDate');
    // ... (‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API)
    return null; // Placeholder
  }
}