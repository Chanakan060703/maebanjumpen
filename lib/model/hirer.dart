// lib/model/hirer.dart
import 'package:maebanjumpen/model/member.dart';
import 'package:maebanjumpen/model/hire.dart'; // ‡πÉ‡∏ä‡πâ Hire ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏° (‡∏´‡∏≤‡∏Å HireLite ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
import 'package:maebanjumpen/model/person.dart';
// ‡∏ï‡πâ‡∏≠‡∏á import Hire ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏° ‡∏´‡∏≤‡∏Å hires ‡πÄ‡∏õ‡πá‡∏ô List<Hire> (‡∏ï‡∏≤‡∏° DTO)

class Hirer extends Member {
  // ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï: hires ‡πÉ‡∏ô Backend DTO ‡πÄ‡∏õ‡πá‡∏ô Set<Hire> ‡πÅ‡∏ï‡πà‡πÉ‡∏ô Flutter DTO ‡πÄ‡∏õ‡πá‡∏ô List<Integer> 
  // ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á Hirer ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏°‡∏≤ ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô List<Hire> ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏°‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
  final List<Hire>? hires;
  final String? username; // username ‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å login.username ‡πÉ‡∏ô Person

  Hirer({
    this.hires,
    this.username,
    super.id,
    super.person,
    String? type,
    super.balance,
  }) : super(
          type: type ?? 'hirer',
        );

  factory Hirer.fromJson(Map<String, dynamic> json) {
    // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á hires: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å List<Map> ‡πÄ‡∏õ‡πá‡∏ô List<Hire>
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ Hire Model ‡∏ï‡∏±‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    var hiresList = json['hires'] as List?;
    List<Hire>? parsedHires;
    if (hiresList != null) {
      // **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:** ‡∏ñ‡πâ‡∏≤ hiresList ‡πÄ‡∏õ‡πá‡∏ô List<int> (hireIds) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
      // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô List<Map> (Hire objects) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ .map()
      parsedHires = hiresList
          .map((i) => Hire.fromJson(i as Map<String, dynamic>))
          .toList();
    }

    final Person? personFromJson = json['person'] != null
        ? Person.fromJson(json['person'] as Map<String, dynamic>)
        : null;

    return Hirer(
      id: json['id'] as int?,
      person: personFromJson,
      type: json['type'] as String?,
      balance: (json['balance'] as num?)?.toDouble(),
      hires: parsedHires,
      // ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å Person.login.username
      username: personFromJson?.login?.username, 
    );
  }

  @override
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = super.toJson();
    data['username'] = username;
    // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á hiresIds ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ:
    // data['hireIds'] = hires?.map((h) => h.hireId).toList(); 
    return data;
  }
  
  // ‡πÇ‡∏Ñ‡πâ‡∏î copyWith() ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  @override
  Hirer copyWith({
    int? id,
    Person? person,
    String? type,
    double? balance,
    List<Hire>? hires,
    String? username,
  }) {
    final Member memberCopy = super.copyWith(
      id: id,
      person: person,
      type: type,
      balance: balance,
    );

    return Hirer(
      id: memberCopy.id,
      person: memberCopy.person,
      type: memberCopy.type, 
      balance: memberCopy.balance,
      hires: hires ?? this.hires,
      username: username ?? this.username,
    );
  }
}