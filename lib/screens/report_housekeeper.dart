import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:maebanjumpen/controller/hireController.dart'; 
import 'package:maebanjumpen/controller/reportController.dart';
import 'package:maebanjumpen/model/hire.dart';
import 'package:maebanjumpen/model/hirer.dart';
import 'package:maebanjumpen/model/housekeeper.dart';
import 'package:maebanjumpen/model/person.dart';
import 'package:maebanjumpen/model/report.dart';

class ReportMemberPage extends StatefulWidget {
  final Hire hire;
  final bool isEnglish;
  final Housekeeper? housekeeper; // Housekeeper is the reporter
  final Person? userPerson; 

  const ReportMemberPage({
    super.key,
    required this.hire,
    required this.isEnglish,
    this.housekeeper,
    this.userPerson,
  });

  @override
  _ReportMemberPageState createState() => _ReportMemberPageState();
}

class _ReportMemberPageState extends State<ReportMemberPage> {
  String? _selectedIssue;
  final TextEditingController _dateController = TextEditingController();
  final TextEditingController _detailsController = TextEditingController();

  final ReportController _reportController = ReportController();
  final Hirecontroller _hireController = Hirecontroller(); 

  @override
  void initState() {
    super.initState();

    _dateController.text = widget.isEnglish
        ? DateFormat('MM/dd/yyyy').format(DateTime.now())
        : DateFormat('dd/MM/yyyy').format(DateTime.now());
  }

  @override
  void dispose() {
    _dateController.dispose();
    _detailsController.dispose();
    super.dispose();
  }

  String _formatDate(DateTime date) {
    return widget.isEnglish
        ? DateFormat('MM/dd/yyyy').format(date)
        : DateFormat('dd/MM/yyyy').format(date);
  }

  void _handleIssueSelected(String value) {
    setState(() {
      _selectedIssue = value;
    });
    debugPrint('Selected Issue: $_selectedIssue');
  }

  Future<void> _selectDate(BuildContext context) async {
    FocusScope.of(context).requestFocus(FocusNode());
    DateTime currentDate = DateTime.now();

    DateTime? picked = await showDatePicker(
      context: context,
      initialDate: currentDate,
      firstDate: DateTime(2000),
      lastDate: currentDate, 
    );

    if (picked != null) {
      setState(() {
        _dateController.text = _formatDate(picked);
      });
    }
  }
  
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Controller ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á ID ‡πÅ‡∏•‡∏∞ Object (‡πÅ‡∏Å‡πâ Type Error)
  Future<void> _updateHireStatusOnReport() async {
    const String newStatus = 'Reported'; 
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ hireId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    if (widget.hire.hireId == null) {
        debugPrint('Cannot update hire status: hireId is null.');
        return;
    }

    final Hire updatedHire = widget.hire.copyWith(
      jobStatus: newStatus,
    );
    
    try {
      // üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡πà‡∏á hireId (int) ‡πÅ‡∏•‡∏∞ updatedHire (Hire)
      await _hireController.updateHire(widget.hire.hireId!, updatedHire); 
      debugPrint('Hire status updated successfully to $newStatus.');
    } catch (e) {
      debugPrint('Error updating hire status: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Warning: Failed to update job status after report.'
                : '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
          ),
          backgroundColor: Colors.orange,
        ),
      );
    }
  }


  Future<void> _submitReport() async {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (_selectedIssue == null || _dateController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Please select an issue type and date.'
                : '‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô DateTime
    DateTime? parsedDate;
    try {
      parsedDate = widget.isEnglish
          ? DateFormat('MM/dd/yyyy').parseStrict(_dateController.text)
          : DateFormat('dd/MM/yyyy').parseStrict(_dateController.text);
    } catch (e) {
      debugPrint('Error parsing date: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Invalid date format. Please select from calendar.'
                : '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Reporter Object (Housekeeper)
    final Housekeeper? reporterHousekeeper = widget.housekeeper;
    if (reporterHousekeeper == null || reporterHousekeeper.id == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Reporter (Housekeeper) information is missing or invalid. Cannot submit report.'
                : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Hirer Object (‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)
    final Hirer? reportedHirer = widget.hire.hirer as Hirer?;
    if (reportedHirer == null || reportedHirer.id == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Reported Hirer information is missing or invalid. Cannot submit report.'
                : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
          ),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Report Object
    final newReport = Report(
      reportTitle: _selectedIssue,
      reportMessage: _detailsController.text,
      reportDate: parsedDate,
      reportStatus: 'pending', 
      hireId: widget.hire.hireId, 
      reporter: reporterHousekeeper, 
      housekeeper: reporterHousekeeper, 
      hirer: reportedHirer, 
      penalty: null, 
    );

    // 6. ‡∏™‡πà‡∏á Report ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
    try {
      final savedReport = await _reportController.addReport(newReport);

      debugPrint('Report submitted successfully: ${savedReport.toJson()}');
      
      // 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await _updateHireStatusOnReport(); 

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Report submitted successfully. Job status updated.'
                : '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß',
          ),
          backgroundColor: Colors.green,
        ),
      );

      // 8. ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á 'true' ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Job History ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
      Navigator.pop(context, true); 
    } catch (e) {
      debugPrint('Error submitting report: $e');

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            widget.isEnglish
                ? 'Failed to submit report: ${e.toString().split(':').last.trim()}'
                : '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${e.toString().split(':').last.trim()}',
          ),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0.5,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.red),
          onPressed: () {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Å‡∏•‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ false ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            Navigator.pop(context, false); 
          },
        ),
        title: Text(
          widget.isEnglish ? 'Report Hirer' : '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á',
          style: const TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              widget.isEnglish ? 'Select Issue Type' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
              style: const TextStyle(
                fontSize: 16.0,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8.0),
            _CircularRadioListTile(
              title: widget.isEnglish
                  ? 'Non-payment or delayed payment'
                  : '‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤',
              value: 'non_payment_delayed_payment',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish
                  ? 'Harassment or inappropriate behavior'
                  : '‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
              value: 'harassment_inappropriate_behavior',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish
                  ? 'Unsafe working conditions'
                  : '‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
              value: 'unsafe_working_conditions',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish
                  ? 'Job scope mismatch'
                  : '‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏•‡∏á',
              value: 'job_scope_mismatch',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish ? 'False accusation' : '‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏´‡∏≤‡πÄ‡∏ó‡πá‡∏à',
              value: 'false_accusation',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish ? 'Violation of terms' : '‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á',
              value: 'violation_of_terms',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            _CircularRadioListTile(
              title: widget.isEnglish ? 'Other issues' : '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
              value: 'other_issues',
              groupValue: _selectedIssue,
              onChanged: _handleIssueSelected,
            ),
            const SizedBox(height: 16.0),
            Text(
              widget.isEnglish
                  ? 'Date and Time of Incident'
                  : '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏',
              style: const TextStyle(
                fontSize: 16.0,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8.0),
            TextField(
              controller: _dateController,
              decoration: InputDecoration(
                hintText: widget.isEnglish ? 'MM/DD/YYYY' : '‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15.0),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.red, width: 2.0),
                  borderRadius: BorderRadius.circular(15.0),
                ),
                enabledBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.grey, width: 1.0),
                  borderRadius: BorderRadius.circular(15.0),
                ),
              ),
              onTap: () => _selectDate(context),
              readOnly: true,
            ),
            const SizedBox(height: 16.0),
            Text(
              widget.isEnglish ? 'Additional Details' : '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
              style: const TextStyle(
                fontSize: 16.0,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 8.0),
            TextField(
              controller: _detailsController,
              maxLines: 5,
              decoration: InputDecoration(
                hintText: widget.isEnglish
                    ? 'Please provide any additional details about the incident...'
                    : '‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå...',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(15.0),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.red, width: 2.0),
                  borderRadius: BorderRadius.circular(15.0),
                ),
                enabledBorder: OutlineInputBorder(
                  borderSide: const BorderSide(color: Colors.grey, width: 1.0),
                  borderRadius: BorderRadius.circular(15.0),
                ),
              ),
            ),
            const SizedBox(height: 24.0),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _submitReport, 
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  padding: const EdgeInsets.symmetric(vertical: 16.0),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                ),
                child: Text(
                  widget.isEnglish ? 'Submit Report' : '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
                  style: const TextStyle(color: Colors.white, fontSize: 16.0),
                ),
              ),
            ),
            const SizedBox(height: 8.0),
            Center(
              child: Text(
                widget.isEnglish
                    ? 'Your report will be processed within 24-48 hours'
                    : '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 12.0, color: Colors.grey[600]),
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: const Icon(Icons.home_outlined),
            label: widget.isEnglish ? 'Home' : '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å',
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.credit_card_outlined),
            label: widget.isEnglish ? 'Cards' : '‡∏ö‡∏±‡∏ï‡∏£',
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.calendar_today_outlined),
            label: widget.isEnglish ? 'Hire' : '‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á',
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.person_outline),
            label: widget.isEnglish ? 'Profile' : '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
          ),
        ],
        currentIndex: 2, 
        selectedItemColor: Colors.red,
        unselectedItemColor: Colors.grey,
        showUnselectedLabels: true,
        onTap: (index) {
          debugPrint('Bottom navigation tapped: $index');
        },
      ),
    );
  }
}

// Custom Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Radio Button ‡∏ß‡∏á‡∏Å‡∏•‡∏° (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
class _CircularRadioListTile extends StatelessWidget {
  final String title;
  final String value;
  final String? groupValue; 
  final ValueChanged<String> onChanged;

  const _CircularRadioListTile({
    super.key,
    required this.title,
    required this.value,
    required this.groupValue,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    bool isSelected = groupValue == value;

    return InkWell(
      onTap: () {
        onChanged(value);
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: Row(
          children: [
            Icon(
              isSelected ? Icons.check_circle : Icons.circle_outlined,
              color: isSelected ? Colors.red : Colors.grey,
              size: 24.0,
            ),
            const SizedBox(width: 16.0),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  fontSize: 16.0,
                  color: isSelected ? Colors.black87 : Colors.grey[700],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}