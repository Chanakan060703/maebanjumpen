import 'package:flutter/material.dart';
import 'package:maebanjumpen/model/transaction.dart';
import 'package:maebanjumpen/controller/transactionController.dart';
import 'package:intl/intl.dart'; // For date formatting (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)

class RequestWithdrawDetailAccountManager extends StatefulWidget {
  final Transaction transaction;
  final bool isEnglish; // ‡∏ï‡∏±‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏©‡∏≤
  final TransactionController transactionController; // ‡∏™‡πà‡∏á controller ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  final int? accountManagerId; // üö® ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Account Manager ID

  const RequestWithdrawDetailAccountManager({
    super.key,
    required this.transaction,
    required this.isEnglish,
    required this.transactionController,
    this.accountManagerId, // üö® ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å ListWithdrawalRequestsScreen
  });

  @override
  State<RequestWithdrawDetailAccountManager> createState() =>
      _RequestWithdrawDetailAccountManagerState();
}

class _RequestWithdrawDetailAccountManagerState
    extends State<RequestWithdrawDetailAccountManager> {
  // Use a local variable to reflect the state that might change
  // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ local ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  late Transaction _currentTransaction;

  // State variables to control visibility of full numbers
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏ï‡πá‡∏°
  bool _showFullPromPay = false;
  bool _showFullBankAccount = false;

  @override
  void initState() {
    super.initState();
    _currentTransaction = widget.transaction;
  }

  /// Helper to get the localized status string
  /// Helper ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß
  String _getLocalizedStatus(String? status, bool isEnglish) {
    if (status == null) return isEnglish ? 'Unknown' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
    if (isEnglish) {
      return status;
    } else {
      switch (status.toLowerCase()) {
        case 'pending approve':
          return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';
        case 'approved':
          return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß';
        case 'rejected':
          return '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
        case 'completed':
          return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
        default:
          return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
      }
    }
  }

  /// Helper to get the status color
  /// Helper ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  Color _getStatusColor(String? status) {
    if (status == null) return Colors.grey;
    final lowerStatus = status.toLowerCase();
    
    if (lowerStatus == 'pending approve' || lowerStatus == '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö') {
      return Colors.orange;
    } else if (lowerStatus == 'approved' ||
        lowerStatus == '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' ||
        lowerStatus == 'completed') {
      return Colors.green;
    } else if (lowerStatus == 'rejected' || lowerStatus == '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò') {
      return Colors.red;
    } else {
      return Colors.grey;
    }
  }

  Future<void> _updateTransactionStatus(String newStatus) async {
    if (_currentTransaction.transactionId == null) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(widget.isEnglish
                  ? 'Transaction ID is missing.'
                  : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°.')),
        );
      }
      return;
    }
    
    // üö® Check Account Manager ID first
    // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Account Manager ID ‡∏Å‡πà‡∏≠‡∏ô
    if (widget.accountManagerId == null) {
        if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(widget.isEnglish
                  ? 'Account Manager ID is missing. Cannot approve/reject.'
                  : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ.')),
        );
      }
      return;
    }

    try {
      // *** Call the updateTransactionStatus method of the controller ***
      // *** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î updateTransactionStatus ‡∏Ç‡∏≠‡∏á controller ***
      bool success = await widget.transactionController.updateTransactionStatus(
        _currentTransaction.transactionId!,
        newStatus,
        widget.accountManagerId!, // üö® Use the passed widget.accountManagerId
      );

      if (mounted) {
        if (success) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text(widget.isEnglish
                    ? 'Transaction status updated to ${_getLocalizedStatus(newStatus, widget.isEnglish)}!'
                    : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô ${_getLocalizedStatus(newStatus, widget.isEnglish)} ‡πÅ‡∏•‡πâ‡∏ß!')),
          );
          // Update the local transaction status and rebuild the UI
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô local ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà
          setState(() {
            _currentTransaction = _currentTransaction.copyWith(
              transactionStatus: newStatus,
              // Update the approval date when the status changes to Approved
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Approved
              transactionApprovalDate: newStatus == 'Approved' 
                ? DateTime.now() 
                : _currentTransaction.transactionApprovalDate,
            );
          });
          // Return to the previous screen with a signal that the update was successful
          // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          Navigator.of(context).pop(true);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text(widget.isEnglish
                    ? 'Failed to update transaction status.'
                    : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à.')),
          );
        }
      }
    } catch (e) {
      print('Error updating transaction status: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(widget.isEnglish
                  ? 'An error occurred: $e'
                  : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // Set requestType to "Withdrawal" or "‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" only
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ requestType ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "Withdrawal" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    final String requestType = widget.isEnglish ? 'Withdrawal' : '‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô';

    final String memberName =
        '${_currentTransaction.member?.person?.firstName ?? (widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ')} ${_currentTransaction.member?.person?.lastName ?? ''}';
    final int? memberId = _currentTransaction.member?.id;

    // Fetch PromPay, Account Number, Account Name from the transaction
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PromPay, Account Number, Account Name ‡∏à‡∏≤‡∏Å transaction
    final String prompayNumber = _currentTransaction.prompayNumber ?? '';
    final String bankAccountNumber = _currentTransaction.bankAccountNumber ?? '';
    final String bankAccountName = _currentTransaction.bankAccountName ?? '';

    // Adjust masking for PromPay and Account Number
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á PromPay ‡πÅ‡∏•‡∏∞ Account Number
    String maskedPromPay = prompayNumber;
    if (prompayNumber.isNotEmpty && prompayNumber.length > 4) {
      // Hide numbers except for the last 4 digits
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      maskedPromPay = '****${prompayNumber.substring(prompayNumber.length - 4)}'; 
    } else if (prompayNumber.isEmpty) {
      maskedPromPay = widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ';
    }

    String maskedAccountNumber = bankAccountNumber;
    if (bankAccountNumber.isNotEmpty && bankAccountNumber.length > 4) {
      // Hide numbers except for the last 4 digits
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      maskedAccountNumber = '****${bankAccountNumber.substring(bankAccountNumber.length - 4)}'; 
    } else if (bankAccountNumber.isEmpty) {
      maskedAccountNumber = widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ';
    }

    final String requestTime = _currentTransaction.transactionDate != null
        ? DateFormat(
            widget.isEnglish ? 'd MMM y, HH:mm' : 'd MMM y, HH:mm',
            widget.isEnglish ? 'en_US' : 'th_TH',
          ).format(_currentTransaction.transactionDate!.toLocal())
        : (widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ');


    final bool isPendingApprove =
        _currentTransaction.transactionStatus?.toLowerCase() == 'pending approve' ||
        _currentTransaction.transactionStatus == '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö';

    return Scaffold(
      appBar: AppBar(
        elevation: 0.5,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.red),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        title: Text(
          widget.isEnglish ? 'Withdrawal Request Details' : '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
          style: const TextStyle(color: Colors.black),
        ),
        backgroundColor: Colors.white,
        centerTitle: false,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Main Details Card
            // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏Å
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: const EdgeInsets.all(20.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        CircleAvatar(
                          radius: 30,
                          // Use a fallback if transaction.member.person.pictureUrl is null or empty
                          // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏≤‡∏Å transaction.member.person.pictureUrl ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                          backgroundImage: (_currentTransaction.member?.person?.pictureUrl != null && _currentTransaction.member!.person!.pictureUrl!.isNotEmpty)
                              ? NetworkImage(_currentTransaction.member!.person!.pictureUrl!)
                              : const AssetImage('assets/placeholder_avatar.png') as ImageProvider, // Placeholder image (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û placeholder)
                          backgroundColor: Colors.grey[200],
                        ),
                        const SizedBox(width: 15),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                memberName,
                                style: const TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              const SizedBox(height: 4),
                              Text(
                                widget.isEnglish ? 'Housekeeper' : '‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey[600],
                                ),
                              ),
                              // Display Member ID (‡πÅ‡∏™‡∏î‡∏á Member ID)
                              Text(
                                '${widget.isEnglish ? 'ID' : '‡∏£‡∏´‡∏±‡∏™'}: ${memberId ?? (widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ')}',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey[600],
                                ),
                              ),
                              const SizedBox(height: 8),
                              // Display amount prominently (‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡πà‡∏ô‡πÜ)
                              Text(
                                '${_currentTransaction.transactionAmount?.toStringAsFixed(2) ?? '0.00'} ‡∏ø',
                                style: const TextStyle(
                                  fontSize: 28,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.red,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    const Divider(height: 30, thickness: 1, color: Colors.grey),
                    _buildDetailRow(
                        widget.isEnglish ? 'Request Type' : '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠',
                        requestType),
                    // PromPay Number with View/Hide button
                    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π/‡∏ã‡πà‡∏≠‡∏ô
                    _buildSensitiveDetailRow(
                      widget.isEnglish ? 'PromPay' : '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå',
                      prompayNumber,
                      maskedPromPay,
                      _showFullPromPay,
                      () {
                        setState(() {
                          _showFullPromPay = !_showFullPromPay;
                        });
                      },
                    ),
                    // Bank Account Number with View/Hide button
                    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π/‡∏ã‡πà‡∏≠‡∏ô
                    _buildSensitiveDetailRow(
                      widget.isEnglish ? 'Account Number' : '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                      bankAccountNumber,
                      maskedAccountNumber,
                      _showFullBankAccount,
                      () {
                        setState(() {
                          _showFullBankAccount = !_showFullBankAccount;
                        });
                      },
                    ),
                    _buildDetailRow(
                        widget.isEnglish ? 'Account Name' : '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                        bankAccountName.isEmpty ? (widget.isEnglish ? 'N/A' : '‡πÑ‡∏°‡πà‡∏°‡∏µ') : bankAccountName),
                    _buildDetailRow(
                        widget.isEnglish ? 'Request Time' : '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠',
                        requestTime),
                    _buildDetailRow(
                        widget.isEnglish ? 'Processing Time' : '‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                        widget.isEnglish
                            ? '1-2 business days'
                            : '1-2 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£'),
                    const SizedBox(height: 8),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          widget.isEnglish ? 'Status' : '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                          style: const TextStyle(
                            fontSize: 15,
                            color: Colors.grey,
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 10, vertical: 5),
                          decoration: BoxDecoration(
                            color: _getStatusColor(_currentTransaction.transactionStatus)
                                .withOpacity(0.2),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Text(
                            _getLocalizedStatus(_currentTransaction.transactionStatus, widget.isEnglish),
                            style: TextStyle(
                              color: _getStatusColor(_currentTransaction.transactionStatus),
                              fontWeight: FontWeight.bold,
                              fontSize: 15,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Buttons: Reject and Approve (Show only when status is "Pending Approve")
            // ‡∏õ‡∏∏‡πà‡∏°: ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            if (isPendingApprove)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => _updateTransactionStatus('Rejected'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 15),
                      ),
                      child: Text(
                        widget.isEnglish ? 'Reject' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
                        style: const TextStyle(
                            fontSize: 16,
                            color: Colors.white,
                            fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                  const SizedBox(width: 15),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => _updateTransactionStatus('Approved'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 15),
                      ),
                      child: Text(
                        widget.isEnglish ? 'Approve' : '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
                        style: const TextStyle(
                            fontSize: 16,
                            color: Colors.white,
                            fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }

  // Helper Widget for creating detail rows (Title: Value)
  // Helper Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ‡∏Ñ‡πà‡∏≤)
  Widget _buildDetailRow(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 15,
              color: Colors.grey,
            ),
          ),
          Expanded(
            // Use Expanded to allow the value to wrap lines
            // ‡πÉ‡∏ä‡πâ expanded ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            child: Text(
              value,
              textAlign: TextAlign.right, // Align value to the right (‡∏à‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
              style: const TextStyle(
                fontSize: 15,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
              overflow: TextOverflow.ellipsis,
              maxLines: 2, // Allow up to 2 lines for the value (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
            ),
          ),
        ],
      ),
    );
  }

  // Helper Widget for creating detail rows with a View/Hide button
  // Helper Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° View/Hide
  Widget _buildSensitiveDetailRow(String title, String fullValue, String maskedValue, bool isShowingFull, VoidCallback onToggle) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: const TextStyle(
              fontSize: 15,
              color: Colors.grey,
            ),
          ),
          Expanded(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                Flexible(
                  child: Text(
                    isShowingFull ? fullValue : maskedValue,
                    textAlign: TextAlign.right,
                    style: const TextStyle(
                      fontSize: 15,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                    overflow: TextOverflow.ellipsis,
                    maxLines: 2,
                  ),
                ),
                if (fullValue.isNotEmpty) // Show button only if data exists (‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
                  IconButton(
                    icon: Icon(
                      isShowingFull ? Icons.visibility_off : Icons.visibility,
                      color: Colors.blue,
                      size: 20,
                    ),
                    onPressed: onToggle,
                    tooltip: isShowingFull ? (widget.isEnglish ? 'Hide' : '‡∏ã‡πà‡∏≠‡∏ô') : (widget.isEnglish ? 'View' : '‡∏î‡∏π'),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}